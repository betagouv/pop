pipeline {
    parameters {
        choice(name: "ENVIR", choices: ["dev", "stg", "prd"], description: "Environment")
        string(name: 'TAG', defaultValue: 'snapshot', description: 'Image tag')
        string(name: 'CHUNKS', defaultValue: '200', description: 'Chunks')
        choice(name: 'COLLECTIONS_FILTERS', choices: ["all", "joconde","memoire","merimee","mnr","palissy","import","museo","autor","enluminures"], description: 'Collections MongoDB Ã  synchroniser')
        string(name: "DB_HOST", defaultValue: "mongodb-ce36dae4-o9fc946a2.database.cloud.ovh.net", description: "url de la database")
        string(name: "ES_HOST", defaultValue: "https://opensearch-ce60a47d-o9fc946a2.database.cloud.ovh.net", description: "url du open search")
    }
        
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    environment {
        APPLICATION = "pop-api"
        DB_NAME = "pop"

        DOMAIN = "${ENVIR == "dev" ? "atnum" : "atnum-release"}"
        REGISTRY_DOMAIN = "${ENVIR == "dev" ? "atnum" : "atnum-release-publisher"}"
        DB_CREDS = credentials("pop-${ENVIR}-db-app-creds")
        ES_CREDS = credentials("pop-${ENVIR}-search-app-creds")
        IMAGE = "${MAIN_DOCKER_REGISTRY_HOST}/${DOMAIN}/${APPLICATION}:${TAG}"
    }

    agent {
        label "${ENVIR}"
    }

    stages {
        stage("env") {
            steps {
                script {
                    sh "printenv"
                }
            }
        }

        stage('Run sync') {
            matrix { 
                when {
                    anyOf {
                        expression { env.COLLECTIONS_FILTERS == "all" }
                        expression { env.COLLECTIONS_FILTERS == env.COLLECTION }
                    }
                }
                axes {
                    axis {
                        name "COLLECTION"
                        values "joconde", "merimee", "palissy", "memoire", "import", "mnr", "museo", "enluminures", "autor"
                    }
                }

                stages {
                    stage("sync") {
                        steps {
                            script {
                                docker.withRegistry("https://${env.MAIN_DOCKER_REGISTRY_HOST}", "main-registry-robot-${REGISTRY_DOMAIN}") {
                                    docker.image("${IMAGE}").inside() {
                                        sh 'DB_ENDPOINT="mongodb+srv://${DB_CREDS_USR}:${DB_CREDS_PSW}@${DB_HOST}?replicaSet=replicaset&tls=true" \
                                            ES_ENDPOINT="${ES_HOST}" \
                                            ES_PORT=20184 \
                                            ES_USERNAME="${ES_CREDS_USR}" \
                                            ES_PASSWORD="${ES_CREDS_PSW}" \
                                            DB_NAME="${DB_NAME}" \
                                            OVH="true" \
                                            node /app/src/elasticsearch/sync.js --force -c ${CHUNKS} -i ${COLLECTION} -q'
                                    }
                                }
                            }
                        }
                    }
                }
            }

        }
    }
}
