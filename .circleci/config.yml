version: 2.1

executors:
  docker_node:
    working_directory: ~/repo
    docker:
      - image: circleci/node:8.11
  docker_python:
    working_directory: ~/repo
    docker:
      - image: circleci/python:2.7-jessie

commands:
  restore_node_modules:
    parameters:
      app:
        type: string
    steps:
      - restore_cache:
          key: << parameters.app >>-dependencies-{{ checksum "apps/<< parameters.app >>/package-lock.json" }}
  save_node_modules:
    parameters:
      app:
        type: string
    steps:
      - save_cache:
          paths:
            - apps/<< parameters.app >>/node_modules
          key: << parameters.app >>-dependencies-{{ checksum "apps/<< parameters.app >>/package-lock.json" }}
  prepare:
    parameters:
      app:
        type: string
    steps:
      - restore_node_modules:
          app: << parameters.app >>
      - run:
          name: prepare
          command: |
            cd apps/<< parameters.app >>
            npm install
      - save_node_modules:
          app: << parameters.app >>
  test:
    parameters:
      app:
        type: string
    steps:
      - checkout
      - restore_node_modules:
          app: << parameters.app >>
      - run:
          name: test
          command: |
            cd apps/<< parameters.app >>
            npm test
  build:
    parameters:
      env:
        type: string
      app: 
        type: string
    steps:
      - checkout
      - restore_node_modules:
          app: << parameters.app >>
      - run:
          name: build
          command: |
            cd apps/<< parameters.app >>
            npm run build:<< parameters.env >>
      - persist_to_workspace:
          root: ~/repo/apps/<< parameters.app >>
          paths:
              - build
  deploy:
    parameters:
      eb_deploy:
        type: string
      app: 
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo/apps/<< parameters.app >>
      - restore_node_modules:
          app: << parameters.app >>
      - configure_aws_ebcli
      - run:
          name: deploy
          command: |
            cd apps/<< parameters.app >>
            eb deploy << parameters.eb_deploy >>
  deploy_api:
    parameters:
      eb_deploy:
        type: string
    steps:
      - checkout
      - restore_node_modules:
          app: api
      - configure_aws_ebcli
      - run:
          name: deploy
          command: |
            cd apps/api
            eb deploy << parameters.eb_deploy >>
  configure_aws_ebcli:
    steps:
      - run: sudo pip install awsebcli
      - run:
          name: AWS credentials
          command: |
            mkdir ~/.aws
            echo "[eb-cli]" > ~/.aws/credentials
            echo "aws_access_key_id=$AWS_ACCESS_KEY_ID" >> ~/.aws/credentials
            echo "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials

########
# JOBS #
########
jobs:
  prepare_all:
    executor: docker_node
    steps:
      - checkout
      - prepare:
          app: api
      - prepare:
          app: consultation
      - prepare:
          app: production
      - prepare:
          app: shared
  ##############
  # TEST JOBS #
  ##############
  test_api:
    docker:
      - image: circleci/node:8.11
      - image: circleci/mongo:3.6
    working_directory: ~/repo
    steps:
      - test:
          app: api
  test_consultation:
    executor: docker_node
    steps:
      - test:
          app: consultation
  test_production:
    executor: docker_node
    steps:
      - test:
          app: production
  test_shared:
    executor: docker_node
    steps:
      - test:
          app: shared
  ##############
  # BUILD JOBS #
  ##############
  build_consultation_staging:
    executor: docker_node
    steps:
      - build:
          app: consultation
          env: staging
  build_production_staging:
    executor: docker_node
    steps:
      - build:
          app: production
          env: staging
  build_consultation_prod:
    executor: docker_node
    steps:
      - build:
          app: consultation
          env: prod
  build_production_prod:
    executor: docker_node
    steps:
      - build:
          app: production
          env: prod
  ###############
  # DEPLOY JOBS #
  ###############
  deploy_consultation_staging:
    executor: docker_python
    steps:
      - deploy:
          app: consultation
          eb_deploy: pop-consultation-staging
  deploy_production_staging:
    executor: docker_python
    steps:
      - deploy:
          app: production
          eb_deploy: pop-production-staging
  deploy_api_staging:
    executor: docker_python
    steps:
      - deploy_api:
          eb_deploy: pop-api-staging
  deploy_consultation_prod:
    executor: docker_python
    steps:
      - deploy:
          app: consultation
          eb_deploy: pop-consultation
  deploy_production_prod:
    executor: docker_python
    steps:
      - deploy:
          app: production
          eb_deploy: pop-production
  deploy_api_prod:
    executor: docker_python
    steps:
      - deploy_api:
          eb_deploy: pop-api

#############
# WORKFLOWS #
#############
workflows:
  version: 2.1
  ci_cd:
    jobs:
      - prepare_all
      - test_api:
          requires:
            - prepare_all
      - test_consultation:
          requires:
            - prepare_all
      - test_production:
          requires:
            - prepare_all
      - test_shared:
          requires:
            - prepare_all
      - build_consultation_staging:
          requires:
            - test_consultation
          filters:
            branches:
              only: master
      - build_production_staging:
          requires:
            - test_production
          filters:
            branches:
              only: master
      - build_consultation_prod:
          requires:
            - deploy_consultation_staging
          filters:
            branches:
              only: master
      - build_production_prod:
          requires:
            - deploy_production_staging
          filters:
            branches:
              only: master
      - deploy_api_staging:
          requires:
            - test_api
          filters:
            branches:
              only: master
      - deploy_consultation_staging:
          requires:
            - build_consultation_staging
          filters:
            branches:
              only: master
      - deploy_production_staging:
          requires:
            - build_production_staging
          filters:
            branches:
              only: master
      - deploy_api_prod:
          requires:
            - deploy_api_staging
          filters:
            branches:
              only: master-disabled
      - deploy_consultation_prod:
          requires:
            - build_consultation_prod
          filters:
            branches:
              only: master-disabled
      - deploy_production_prod:
          requires:
            - build_production_prod
          filters:
            branches:
              only: master-disabled
